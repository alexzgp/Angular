{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/travel/travel.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../card/card.component\";\n\nfunction TravelListComponent_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"card\", 2);\n  }\n\n  if (rf & 2) {\n    const currentTravel_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"travel\", currentTravel_r1);\n  }\n}\n\nexport let TravelListComponent = /*#__PURE__*/(() => {\n  class TravelListComponent {\n    /*\r\n    Para hacer llamadas al backend usamos servicios.\r\n    Para usar un servicio en un componente tenemos que agregarlo (inyectarlo) en el constructor.\r\n    Esto lo hace Angular por nosotros automáticamente,\r\n    solo tenemos que decirle qué servicio tiene que darnos.\r\n    */\n    constructor(travelService) {\n      this.travelService = travelService;\n      /* Esta propiedad es un Observable porque los datos\r\n        no los tenemos al momento.\r\n        Un Observable es un tipo de dato que trabaja Asíncronamente.\r\n        Los Observables para usarlos necesitamos decirle QUÉ TIPO DE DATO\r\n        esperamos tener.\r\n        El símbolo del dólar al final de una palabra,\r\n        se pone por convención para decir que este objeto será un Observable,\r\n        no es obligatorio.\r\n      */\n\n      this.travelList$ = of([]);\n    }\n    /*\r\n      Esta función se ejecuta al usar el componente desde otro componente.\r\n      Sólo se ejecuta una vez y se llama automáticamente.\r\n    */\n\n\n    ngOnInit() {\n      /*\r\n      Aquí estamos asignando a la propiedad travelList$ lo que retorna\r\n      el servicio travelService en la función getTravelList()\r\n      Si veis getTravelList encontraréis que retorna un Observable de tipo\r\n      Travel[]. getTravelList(): Observable<Travel[]> {...}\r\n      */\n      this.travelList$ = this.travelService.getTravelList();\n    }\n\n  }\n\n  TravelListComponent.ɵfac = function TravelListComponent_Factory(t) {\n    return new (t || TravelListComponent)(i0.ɵɵdirectiveInject(i1.TravelService));\n  };\n\n  TravelListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TravelListComponent,\n    selectors: [[\"app-travel-list\"]],\n    decls: 3,\n    vars: 3,\n    consts: [[1, \"travel-list\"], [3, \"travel\", 4, \"ngFor\", \"ngForOf\"], [3, \"travel\"]],\n    template: function TravelListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, TravelListComponent_card_1_Template, 1, 1, \"card\", 1);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx.travelList$));\n      }\n    },\n    directives: [i2.NgForOf, i3.CardComponent],\n    pipes: [i2.AsyncPipe],\n    styles: [\".travel-list[_ngcontent-%COMP%]{width:100%;display:grid;grid-gap:2em;gap:2em;padding:3em;grid-template-columns:1fr 1fr 1fr 1fr}@media only screen and (max-width: 1150px){.travel-list[_ngcontent-%COMP%]{grid-template-columns:1fr 1fr 1fr}}@media only screen and (max-width: 768px){.travel-list[_ngcontent-%COMP%]{grid-template-columns:1fr 1fr}}@media only screen and (max-width: 500px){.travel-list[_ngcontent-%COMP%]{grid-template-columns:1fr}}\"]\n  });\n  return TravelListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}